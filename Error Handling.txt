에러를 어떻게 처리를 할까??

가능한 모든 에러에 대해 예측 가능해야 함
자동으로 복구 가능해야 함 => pm2 ??...;; nodemon 은 안기ㅗ
HTTP 요청 중 발생한 오류는 클라이언트에 최소한의 정보와 함꼐 전달되어야 함
오류의 근본적 원인을 쉽게 추적할 수잇어야 한다

1. 비동기 에러를 정확하게 하자
  callback : 시간 내 처리하지 못하면 에러 처리, 그리고 비동기로 err 반환
  promise + promise callback : reject 로 에러 처리, .catch(err => ()) 로 받아서 처리
  async await 함수 호출에서 함수를 try { } catch () {} 로 감싸기
    // 함수 자체가 리턴되어버리면 추적 불가임...

2. 예상하지 못한 시나리오 발생 시
  uncaughtException, unhandledRejection 이거 잘 써보세요...
  위 2개는 어플리케이션이 지속하지 못할만큼 큰 에러임..
    => 대처방안으로 로그를 남기고 추후에 파악 가능하도록 / APM 서버 전송
      어플 강제종료, 대체할 프로세스 실행
    
  process.on('uncaughtException', (err) => {
    process.exit(-1);
  });

3. 에러 마스킹
  에러를 마스킹해버려서 콜스택 아래의 호출자에서 오류가 발생한 경우에도 에러를 인식하지 못함
    어떤 에러가 발생햇는지 정확하게 확인가능하도록,, 한 함수에 하나의 기능만 넣어라 이 뜻인가??

4. 일반적인 에러를 정확한 에러로 변환
  JS의 Error는 매우 제네릭하대.... error 의 속성 [messsage, code, stack] 속성을 봐야하는데 이게 솔직히 불편함
  구체적인 에러 예시로는 TypeError, SyntaxError, RangeError 이 있는데 재사용할 수 있는게 아님

  나만의 에러 유형을 정의하고 올바른 에러를 던져야 함
class UserServiceError extends Error {
  constructor(...args) {
    super(...args)
    this.code = 'ERR_USER_SERVICE'
    this.name = 'UserServiceError'
    this.stack = `${this.message}\n${new Error().stack}`
  }
}

class InvalidInputError extends Error {
  constructor(...args) {
    super(...args)
    this.code = 'ERR_INVALID_INPUT'
    this.name = 'InvalidInputError'
    this.stack = `${this.message}\n${new Error().stack}`
  }
}

async function getUser(userId) {
  if (!userId) throw new InvalidInputError('userId is not provided')

  try {
    return getUserFromApi(userId)
  } catch (err) {
    throw new UserServiceError(err.message)
  }
}

이렇게 하면 굳이 에러코드 목록을 보여줄 필요도 없고 바로바로 확인하면 된다

5. 외부 서비스의 예기치 못한 상황 대처하기
  외부 서비스가 잘못될 수 잇는 가능한 모든 시나리오를 짜놔야 함
  다른서비스를 사용할 때는 엄격하게...
    const body = await client.get("API");
    const user = body.users || [];
  이게 api 업데이트하면서 users 로 안들어올 수 도 있음.

6. 에러별 적절한 로그 레벨 사요하기
  debug : 심각하지 않은 메시지
  info :  성공 작업 식별용 정보성 메시지
  warn : 즉각적 액션이 필요치 않은 경고성 메시지, 디버깅을 위해 필요
  error : 즉각적 액션이 필요한 모든 에러, 에러 무시할 경우 심각한 시나리오로 이어짐
  fatal : 서비스 중단과 같은 중요 구성요소의 장래를 나타내는 모든 오류

