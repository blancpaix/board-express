Token

session 대신에 JWT 적용
JWT 특징으로는 인증용 데이터를 dB에 따로 저장해놓지 않음
다만 만료된 토큰을 재발급하기 위한 fresh token은 DB에 저장해놓을 필요가 있음

jwt 라이브러리로 간단하게 토큰을 발급받을 수 있음

다만, fresh token이 기기별로 달라질 수 있따는점을 고려해야 한다.
다중 계정이 사용가능한 서비스일 경우 모바일, 데스크탑, 태블릿 등에서 로그인이 풀려버리는 현상이 발생할 것이다.
그렇다면 어떻게 할것인가?
device별 fresh token 을 분리하는게 좋을듯?
그러면 멀티컬럼이 되겠넹


단점으로는 http request에 header용량이 커지는 그런 단점이 있다.
잦은 요청이 들어온다면 트래픽을 잘 감당해 낼 수 잇어야 한다.


1. 한번의 로그인으로 계속 인증이 가능하다 (어플리케이션에서 유용)
  액세스 토큰 1시간, 리프레시 토큰 14 / 90일
    로그인 시 두개의 토큰 동시에 전송
    매 요청마다 액세스토큰과 리프레시 토큰이 함께 전송이 된다.

2. 다수의 장치에서 로그인 할 수 있어야 한다. 모바일 어플의 경우 한가지로 제한 가능
  리프레시토큰에 client-agent 를 기록해서 어떤 장치에서 접속을 하였는지 기록한다.
  자동만기처리는 레디스가 제일 좋긴한데 DB에 저장하고 배치로 리프레시토큰을 제거하는 방버도 있다.
  => 리프레시 토큰을 DB에 저장하되, 만료일이나 생성일 컬럼을 두고 만료시간에 따라 배치 처리를 해야한다

3. 사용자의 요청에서 액세스 토큰이 만료된경우 클라이언트에서 액세스 토큰을 받아서 다시 넣어줘야 한다.
  (클라이언트의 어느 url에서든지 처리가 가능해야 할듯??)

세션 / 쿠키 / 토큰
토큰은 양날의 검이다.
  세션은 많은 메모리를 사용한다.
  쿠키는 세션 유지용 또는 기타 잡다한 정보 저장용 공간,
  토큰은 트래픽을 유발한다.

분산 서비스 환경에서의 세션 유지는 한 서버로 세션을 몰아줘야 하는데 그것은 사실상 좀 어렵다.
레디스에다가 세션을 넣어주는 방법이 그나마 낫다. 레디스도 느리다는 말이 있다. HashTable 처럼 만들어서 사용하기에 굳이 redis 를 사용하지 않아도 적당히 구현 가능할듯?
토큰이 탈취된다면 큰 위험이 생기는 토큰이지만 사용자 부주의만 제외한다면 어느정도 괜찮은 방식이라 생각한다.

리프레쉬 토큰 검증을 어덯게 이뤄내는게 맞나...
접속한 기기의 브라우저 정보.
ip는 사실상 좀 어렵고?? 네이버에서 다른 장소에서 로그인하면 알람이 온다.
그러면 nosql 같은곳에 로그인 기록을 유지한다고 가정하고,
위치별로 로그인 한 기록을 남겨놓는게 좋겠다. 이 또한 오랫동안 사용하지 않은 기록은 자동으로 삭제하는게 좋지
3개월 정도??
ip를 통해서 대략적인 위치는 추적이 가능하잖아...?? 아마 이런 서비스가 있을것으로 예상이 됨.


그렇다고 해도 보안상 리프레시 토큰은 1회용으로 만들어주는게 좋다.
로그인을 하면 리프레시 토큰은 지워버리는걸로 하지 뭐.. 다른 방법은 없의니까



로그인을 시작하는 경우를 생각을 해보자.
1. 리프레시 토큰이 있다 => 액세스 토큰과 공존한다. 액세스 토큰만 없을 수 없음
  액세스 토큰이 만료된 경우 미들웨어에서 재발급 처리를 하는게 좋을듯?
2. 둘다 없다?
  둘다 재발급
3. 액세스 토큰만 있다 => 만료시간 전 까지 정상적으로 작동

- 로그인의 경우 email, password로만 검증을 수행하고 두개의 토큰을 발급함
- 액티브 토큰이 만료된 경우 리프레시 토큰과 액세스 토큰을 재발급
